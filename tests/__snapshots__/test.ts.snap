export const snapshot = {};

snapshot[`Tests for atcoder cli > snapshot test for python project directory structure 1`] = `
{
  children: [
    {
      content: 'import { defineConfig } from "../../../src/main.ts"\\n' +
        "\\n" +
        "export default defineConfig({\\n" +
        "  source: {\\n" +
        '    extension: "py",\\n' +
        "    compileCommand: (source) => \`python3 -m py_compile \${source}\`,\\n" +
        "    executeCommand: (source) => \`python3 \${source}\`,\\n" +
        "  },\\n" +
        "})\\n",
      name: "atcoder.config.ts",
      type: "file"
    },
    {
      children: [
        {
          children: [
            {
              children: [
                { content: "", name: "a.py", type: "file" },
                {
                  content: "{\\n" +
                    '  "contest": "abc100",\\n' +
                    '  "problem": "A",\\n' +
                    '  "source": {\\n' +
                    '    "path": "a.py",\\n' +
                    '    "compileCommand": "python3 -m py_compile a.py",\\n' +
                    '    "executeCommand": "python3 a.py"\\n' +
                    "  },\\n" +
                    '  "tests": [\\n' +
                    "    {\\n" +
                    '      "input": "tests/in_1.txt",\\n' +
                    '      "output": "tests/out_1.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_2.txt",\\n' +
                    '      "output": "tests/out_2.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_3.txt",\\n' +
                    '      "output": "tests/out_3.txt"\\n' +
                    "    }\\n" +
                    "  ]\\n" +
                    "}",
                  name: "metadata.json",
                  type: "file"
                },
                {
                  children: [
                    {
                      content: "5 4\\n",
                      name: "in_1.txt",
                      type: "file"
                    },
                    {
                      content: "8 8\\n",
                      name: "in_2.txt",
                      type: "file"
                    },
                    {
                      content: "11 4\\n",
                      name: "in_3.txt",
                      type: "file"
                    },
                    {
                      content: "Yay!\\n",
                      name: "out_1.txt",
                      type: "file"
                    },
                    {
                      content: "Yay!\\n",
                      name: "out_2.txt",
                      type: "file"
                    },
                    {
                      content: ":(\\n",
                      name: "out_3.txt",
                      type: "file"
                    },
                    {
                      content: "#!/usr/bin/env -S deno test --allow-read --allow-env --allow-run --allow-net\\n" +
                        "\\n" +
                        'import * as path from "jsr:@std/path@0.225.1"\\n' +
                        'import { \$ } from "jsr:@david/dax@0.41.0"\\n' +
                        'import { assertEquals } from "jsr:@std/assert@^0.225.2"\\n' +
                        'import { beforeAll, describe, it } from "jsr:@std/testing/bdd"\\n' +
                        "import {\\n" +
                        "  getMetadata,\\n" +
                        "  getProblemDir,\\n" +
                        "  METADATA_FILE_NAME,\\n" +
                        '} from "jsr:@r4ai/atcoder-cli@0.3.1"\\n' +
                        "\\n" +
                        "const testsDir = import.meta.dirname!\\n" +
                        "const problemDir = getProblemDir(testsDir)\\n" +
                        "if (!problemDir) {\\n" +
                        "  throw new Error(\\n" +
                        "    \`Failed to get problem directory. Make sure \\\\\`\${METADATA_FILE_NAME}\\\\\` exists.\`,\\n" +
                        "  )\\n" +
                        "}\\n" +
                        "const metadata = getMetadata(problemDir)\\n" +
                        "if (!metadata) {\\n" +
                        "  throw new Error(\\n" +
                        "    \`Failed to get metadata for \${problemDir}. Make sure \\\\\`\${METADATA_FILE_NAME}\\\\\` exists.\`,\\n" +
                        "  )\\n" +
                        "}\\n" +
                        "\\n" +
                        "describe(\`\${metadata.contest}/\${metadata.problem}\`, () => {\\n" +
                        "  beforeAll(async () => {\\n" +
                        "    // Compile\\n" +
                        "    await \$.raw\`\${metadata.source.compileCommand}\`.cwd(problemDir)\\n" +
                        "  })\\n" +
                        "\\n" +
                        "  for (const test of metadata.tests) {\\n" +
                        "    it(test.input, async () => {\\n" +
                        "      const input = (await Deno.readTextFile(\\n" +
                        "        path.resolve(problemDir, test.input),\\n" +
                        "      )).trimEnd()\\n" +
                        "      const expected = (await Deno.readTextFile(\\n" +
                        "        path.resolve(problemDir, test.output),\\n" +
                        "      )).trimEnd()\\n" +
                        "      const actual = await \$.raw\`\${metadata.source.executeCommand}\`.stdinText(\\n" +
                        "        input,\\n" +
                        "      ).cwd(problemDir).text()\\n" +
                        "      assertEquals(\\n" +
                        "        actual,\\n" +
                        "        expected,\\n" +
                        "      )\\n" +
                        "    })\\n" +
                        "  }\\n" +
                        "})\\n",
                      name: "test.ts",
                      type: "file"
                    }
                  ],
                  name: "tests",
                  type: "dir"
                }
              ],
              name: "A",
              type: "dir"
            },
            {
              children: [
                { content: "", name: "b.py", type: "file" },
                {
                  content: "{\\n" +
                    '  "contest": "abc100",\\n' +
                    '  "problem": "B",\\n' +
                    '  "source": {\\n' +
                    '    "path": "b.py",\\n' +
                    '    "compileCommand": "python3 -m py_compile b.py",\\n' +
                    '    "executeCommand": "python3 b.py"\\n' +
                    "  },\\n" +
                    '  "tests": [\\n' +
                    "    {\\n" +
                    '      "input": "tests/in_1.txt",\\n' +
                    '      "output": "tests/out_1.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_2.txt",\\n' +
                    '      "output": "tests/out_2.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_3.txt",\\n' +
                    '      "output": "tests/out_3.txt"\\n' +
                    "    }\\n" +
                    "  ]\\n" +
                    "}",
                  name: "metadata.json",
                  type: "file"
                },
                {
                  children: [
                    {
                      content: "0 5\\n",
                      name: "in_1.txt",
                      type: "file"
                    },
                    {
                      content: "1 11\\n",
                      name: "in_2.txt",
                      type: "file"
                    },
                    {
                      content: "2 85\\n",
                      name: "in_3.txt",
                      type: "file"
                    },
                    { content: "5\\n", name: "out_1.txt", type: "file" },
                    {
                      content: "1100\\n",
                      name: "out_2.txt",
                      type: "file"
                    },
                    {
                      content: "850000\\n",
                      name: "out_3.txt",
                      type: "file"
                    },
                    {
                      content: "#!/usr/bin/env -S deno test --allow-read --allow-env --allow-run --allow-net\\n" +
                        "\\n" +
                        'import * as path from "jsr:@std/path@0.225.1"\\n' +
                        'import { \$ } from "jsr:@david/dax@0.41.0"\\n' +
                        'import { assertEquals } from "jsr:@std/assert@^0.225.2"\\n' +
                        'import { beforeAll, describe, it } from "jsr:@std/testing/bdd"\\n' +
                        "import {\\n" +
                        "  getMetadata,\\n" +
                        "  getProblemDir,\\n" +
                        "  METADATA_FILE_NAME,\\n" +
                        '} from "jsr:@r4ai/atcoder-cli@0.3.1"\\n' +
                        "\\n" +
                        "const testsDir = import.meta.dirname!\\n" +
                        "const problemDir = getProblemDir(testsDir)\\n" +
                        "if (!problemDir) {\\n" +
                        "  throw new Error(\\n" +
                        "    \`Failed to get problem directory. Make sure \\\\\`\${METADATA_FILE_NAME}\\\\\` exists.\`,\\n" +
                        "  )\\n" +
                        "}\\n" +
                        "const metadata = getMetadata(problemDir)\\n" +
                        "if (!metadata) {\\n" +
                        "  throw new Error(\\n" +
                        "    \`Failed to get metadata for \${problemDir}. Make sure \\\\\`\${METADATA_FILE_NAME}\\\\\` exists.\`,\\n" +
                        "  )\\n" +
                        "}\\n" +
                        "\\n" +
                        "describe(\`\${metadata.contest}/\${metadata.problem}\`, () => {\\n" +
                        "  beforeAll(async () => {\\n" +
                        "    // Compile\\n" +
                        "    await \$.raw\`\${metadata.source.compileCommand}\`.cwd(problemDir)\\n" +
                        "  })\\n" +
                        "\\n" +
                        "  for (const test of metadata.tests) {\\n" +
                        "    it(test.input, async () => {\\n" +
                        "      const input = (await Deno.readTextFile(\\n" +
                        "        path.resolve(problemDir, test.input),\\n" +
                        "      )).trimEnd()\\n" +
                        "      const expected = (await Deno.readTextFile(\\n" +
                        "        path.resolve(problemDir, test.output),\\n" +
                        "      )).trimEnd()\\n" +
                        "      const actual = await \$.raw\`\${metadata.source.executeCommand}\`.stdinText(\\n" +
                        "        input,\\n" +
                        "      ).cwd(problemDir).text()\\n" +
                        "      assertEquals(\\n" +
                        "        actual,\\n" +
                        "        expected,\\n" +
                        "      )\\n" +
                        "    })\\n" +
                        "  }\\n" +
                        "})\\n",
                      name: "test.ts",
                      type: "file"
                    }
                  ],
                  name: "tests",
                  type: "dir"
                }
              ],
              name: "B",
              type: "dir"
            },
            {
              children: [
                { content: "", name: "c.py", type: "file" },
                {
                  content: "{\\n" +
                    '  "contest": "abc100",\\n' +
                    '  "problem": "C",\\n' +
                    '  "source": {\\n' +
                    '    "path": "c.py",\\n' +
                    '    "compileCommand": "python3 -m py_compile c.py",\\n' +
                    '    "executeCommand": "python3 c.py"\\n' +
                    "  },\\n" +
                    '  "tests": [\\n' +
                    "    {\\n" +
                    '      "input": "tests/in_1.txt",\\n' +
                    '      "output": "tests/out_1.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_2.txt",\\n' +
                    '      "output": "tests/out_2.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_3.txt",\\n' +
                    '      "output": "tests/out_3.txt"\\n' +
                    "    }\\n" +
                    "  ]\\n" +
                    "}",
                  name: "metadata.json",
                  type: "file"
                },
                {
                  children: [
                    {
                      content: "3\\n5 2 4\\n",
                      name: "in_1.txt",
                      type: "file"
                    },
                    {
                      content: "4\\n631 577 243 199\\n",
                      name: "in_2.txt",
                      type: "file"
                    },
                    {
                      content: "10\\n2184 2126 1721 1800 1024 2528 3360 1945 1280 1776\\n",
                      name: "in_3.txt",
                      type: "file"
                    },
                    { content: "3\\n", name: "out_1.txt", type: "file" },
                    { content: "0\\n", name: "out_2.txt", type: "file" },
                    {
                      content: "39\\n",
                      name: "out_3.txt",
                      type: "file"
                    },
                    {
                      content: "#!/usr/bin/env -S deno test --allow-read --allow-env --allow-run --allow-net\\n" +
                        "\\n" +
                        'import * as path from "jsr:@std/path@0.225.1"\\n' +
                        'import { \$ } from "jsr:@david/dax@0.41.0"\\n' +
                        'import { assertEquals } from "jsr:@std/assert@^0.225.2"\\n' +
                        'import { beforeAll, describe, it } from "jsr:@std/testing/bdd"\\n' +
                        "import {\\n" +
                        "  getMetadata,\\n" +
                        "  getProblemDir,\\n" +
                        "  METADATA_FILE_NAME,\\n" +
                        '} from "jsr:@r4ai/atcoder-cli@0.3.1"\\n' +
                        "\\n" +
                        "const testsDir = import.meta.dirname!\\n" +
                        "const problemDir = getProblemDir(testsDir)\\n" +
                        "if (!problemDir) {\\n" +
                        "  throw new Error(\\n" +
                        "    \`Failed to get problem directory. Make sure \\\\\`\${METADATA_FILE_NAME}\\\\\` exists.\`,\\n" +
                        "  )\\n" +
                        "}\\n" +
                        "const metadata = getMetadata(problemDir)\\n" +
                        "if (!metadata) {\\n" +
                        "  throw new Error(\\n" +
                        "    \`Failed to get metadata for \${problemDir}. Make sure \\\\\`\${METADATA_FILE_NAME}\\\\\` exists.\`,\\n" +
                        "  )\\n" +
                        "}\\n" +
                        "\\n" +
                        "describe(\`\${metadata.contest}/\${metadata.problem}\`, () => {\\n" +
                        "  beforeAll(async () => {\\n" +
                        "    // Compile\\n" +
                        "    await \$.raw\`\${metadata.source.compileCommand}\`.cwd(problemDir)\\n" +
                        "  })\\n" +
                        "\\n" +
                        "  for (const test of metadata.tests) {\\n" +
                        "    it(test.input, async () => {\\n" +
                        "      const input = (await Deno.readTextFile(\\n" +
                        "        path.resolve(problemDir, test.input),\\n" +
                        "      )).trimEnd()\\n" +
                        "      const expected = (await Deno.readTextFile(\\n" +
                        "        path.resolve(problemDir, test.output),\\n" +
                        "      )).trimEnd()\\n" +
                        "      const actual = await \$.raw\`\${metadata.source.executeCommand}\`.stdinText(\\n" +
                        "        input,\\n" +
                        "      ).cwd(problemDir).text()\\n" +
                        "      assertEquals(\\n" +
                        "        actual,\\n" +
                        "        expected,\\n" +
                        "      )\\n" +
                        "    })\\n" +
                        "  }\\n" +
                        "})\\n",
                      name: "test.ts",
                      type: "file"
                    }
                  ],
                  name: "tests",
                  type: "dir"
                }
              ],
              name: "C",
              type: "dir"
            },
            {
              children: [
                { content: "", name: "d.py", type: "file" },
                {
                  content: "{\\n" +
                    '  "contest": "abc100",\\n' +
                    '  "problem": "D",\\n' +
                    '  "source": {\\n' +
                    '    "path": "d.py",\\n' +
                    '    "compileCommand": "python3 -m py_compile d.py",\\n' +
                    '    "executeCommand": "python3 d.py"\\n' +
                    "  },\\n" +
                    '  "tests": [\\n' +
                    "    {\\n" +
                    '      "input": "tests/in_1.txt",\\n' +
                    '      "output": "tests/out_1.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_2.txt",\\n' +
                    '      "output": "tests/out_2.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_3.txt",\\n' +
                    '      "output": "tests/out_3.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_4.txt",\\n' +
                    '      "output": "tests/out_4.txt"\\n' +
                    "    }\\n" +
                    "  ]\\n" +
                    "}",
                  name: "metadata.json",
                  type: "file"
                },
                {
                  children: [
                    {
                      content: "5 3\\n3 1 4\\n1 5 9\\n2 6 5\\n3 5 8\\n9 7 9\\n",
                      name: "in_1.txt",
                      type: "file"
                    },
                    {
                      content: "5 3\\n1 -2 3\\n-4 5 -6\\n7 -8 -9\\n-10 11 -12\\n13 -14 15\\n",
                      name: "in_2.txt",
                      type: "file"
                    },
                    {
                      content: "10 5\\n" +
                        "10 -80 21\\n" +
                        "23 8 38\\n" +
                        "-94 28 11\\n" +
                        "-26 -2 18\\n" +
                        "-69 72 79\\n" +
                        "-26 -86 -54\\n" +
                        "-72 -50 59\\n" +
                        "21 65 -32\\n" +
                        "40 -94 87\\n" +
                        "-62 18 82\\n",
                      name: "in_3.txt",
                      type: "file"
                    },
                    {
                      content: "3 2\\n" +
                        "2000000000 -9000000000 4000000000\\n" +
                        "7000000000 -5000000000 3000000000\\n" +
                        "6000000000 -1000000000 8000000000\\n",
                      name: "in_4.txt",
                      type: "file"
                    },
                    {
                      content: "56\\n",
                      name: "out_1.txt",
                      type: "file"
                    },
                    {
                      content: "54\\n",
                      name: "out_2.txt",
                      type: "file"
                    },
                    {
                      content: "638\\n",
                      name: "out_3.txt",
                      type: "file"
                    },
                    {
                      content: "30000000000\\n",
                      name: "out_4.txt",
                      type: "file"
                    },
                    {
                      content: "#!/usr/bin/env -S deno test --allow-read --allow-env --allow-run --allow-net\\n" +
                        "\\n" +
                        'import * as path from "jsr:@std/path@0.225.1"\\n' +
                        'import { \$ } from "jsr:@david/dax@0.41.0"\\n' +
                        'import { assertEquals } from "jsr:@std/assert@^0.225.2"\\n' +
                        'import { beforeAll, describe, it } from "jsr:@std/testing/bdd"\\n' +
                        "import {\\n" +
                        "  getMetadata,\\n" +
                        "  getProblemDir,\\n" +
                        "  METADATA_FILE_NAME,\\n" +
                        '} from "jsr:@r4ai/atcoder-cli@0.3.1"\\n' +
                        "\\n" +
                        "const testsDir = import.meta.dirname!\\n" +
                        "const problemDir = getProblemDir(testsDir)\\n" +
                        "if (!problemDir) {\\n" +
                        "  throw new Error(\\n" +
                        "    \`Failed to get problem directory. Make sure \\\\\`\${METADATA_FILE_NAME}\\\\\` exists.\`,\\n" +
                        "  )\\n" +
                        "}\\n" +
                        "const metadata = getMetadata(problemDir)\\n" +
                        "if (!metadata) {\\n" +
                        "  throw new Error(\\n" +
                        "    \`Failed to get metadata for \${problemDir}. Make sure \\\\\`\${METADATA_FILE_NAME}\\\\\` exists.\`,\\n" +
                        "  )\\n" +
                        "}\\n" +
                        "\\n" +
                        "describe(\`\${metadata.contest}/\${metadata.problem}\`, () => {\\n" +
                        "  beforeAll(async () => {\\n" +
                        "    // Compile\\n" +
                        "    await \$.raw\`\${metadata.source.compileCommand}\`.cwd(problemDir)\\n" +
                        "  })\\n" +
                        "\\n" +
                        "  for (const test of metadata.tests) {\\n" +
                        "    it(test.input, async () => {\\n" +
                        "      const input = (await Deno.readTextFile(\\n" +
                        "        path.resolve(problemDir, test.input),\\n" +
                        "      )).trimEnd()\\n" +
                        "      const expected = (await Deno.readTextFile(\\n" +
                        "        path.resolve(problemDir, test.output),\\n" +
                        "      )).trimEnd()\\n" +
                        "      const actual = await \$.raw\`\${metadata.source.executeCommand}\`.stdinText(\\n" +
                        "        input,\\n" +
                        "      ).cwd(problemDir).text()\\n" +
                        "      assertEquals(\\n" +
                        "        actual,\\n" +
                        "        expected,\\n" +
                        "      )\\n" +
                        "    })\\n" +
                        "  }\\n" +
                        "})\\n",
                      name: "test.ts",
                      type: "file"
                    }
                  ],
                  name: "tests",
                  type: "dir"
                }
              ],
              name: "D",
              type: "dir"
            }
          ],
          name: "abc100",
          type: "dir"
        }
      ],
      name: "contests",
      type: "dir"
    }
  ],
  name: "python",
  type: "dir"
}
`;

snapshot[`Tests for atcoder cli > snapshot test for ocaml project directory structure 1`] = `
{
  children: [
    {
      content: 'import { defineConfig } from "../../../src/main.ts"\\n' +
        'import { dedent } from "../../../src/deps.ts"\\n' +
        "\\n" +
        "export default defineConfig({\\n" +
        '  contestsDir: "contests",\\n' +
        "  source: {\\n" +
        '    extension: "ml",\\n' +
        "    compileCommand: (source) =>\\n" +
        "      [\\n" +
        '        "eval (opam env) ocamlfind ocamlopt -O2 -o a.out",\\n' +
        "        \`\${source} -linkpkg -thread\`,\\n" +
        '        "-package str,num,threads,containers,core,iter,batteries",\\n' +
        '      ].join(" "),\\n' +
        '    executeCommand: "./a.out",\\n' +
        "    template: dedent\`\\n" +
        "      open Batteries\\n" +
        "    \`,\\n" +
        "  },\\n" +
        "  templates: (problem, contest) => [\\n" +
        "    {\\n" +
        '      filename: "dune",\\n' +
        "      content: dedent\`\\n" +
        "        (executable\\n" +
        "          (name \${problem.id})\\n" +
        "          (public_name \${contest.id}-\${problem.id})\\n" +
        "          (libraries batteries))\\n" +
        "      \`,\\n" +
        "    },\\n" +
        "  ],\\n" +
        "})\\n",
      name: "atcoder.config.ts",
      type: "file"
    },
    {
      children: [
        {
          children: [
            {
              children: [
                {
                  content: "open Batteries",
                  name: "a.ml",
                  type: "file"
                },
                {
                  content: "(executable\\n" +
                    "  (name A)\\n" +
                    "  (public_name abc100-A)\\n" +
                    "  (libraries batteries))",
                  name: "dune",
                  type: "file"
                },
                {
                  content: "{\\n" +
                    '  "contest": "abc100",\\n' +
                    '  "problem": "A",\\n' +
                    '  "source": {\\n' +
                    '    "path": "a.ml",\\n' +
                    '    "compileCommand": "eval (opam env) ocamlfind ocamlopt -O2 -o a.out a.ml -linkpkg -thread -package str,num,threads,containers,core,iter,batteries",\\n' +
                    '    "executeCommand": "./a.out"\\n' +
                    "  },\\n" +
                    '  "tests": [\\n' +
                    "    {\\n" +
                    '      "input": "tests/in_1.txt",\\n' +
                    '      "output": "tests/out_1.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_2.txt",\\n' +
                    '      "output": "tests/out_2.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_3.txt",\\n' +
                    '      "output": "tests/out_3.txt"\\n' +
                    "    }\\n" +
                    "  ]\\n" +
                    "}",
                  name: "metadata.json",
                  type: "file"
                },
                {
                  children: [
                    {
                      content: "5 4\\n",
                      name: "in_1.txt",
                      type: "file"
                    },
                    {
                      content: "8 8\\n",
                      name: "in_2.txt",
                      type: "file"
                    },
                    {
                      content: "11 4\\n",
                      name: "in_3.txt",
                      type: "file"
                    },
                    {
                      content: "Yay!\\n",
                      name: "out_1.txt",
                      type: "file"
                    },
                    {
                      content: "Yay!\\n",
                      name: "out_2.txt",
                      type: "file"
                    },
                    {
                      content: ":(\\n",
                      name: "out_3.txt",
                      type: "file"
                    },
                    {
                      content: "#!/usr/bin/env -S deno test --allow-read --allow-env --allow-run --allow-net\\n" +
                        "\\n" +
                        'import * as path from "jsr:@std/path@0.225.1"\\n' +
                        'import { \$ } from "jsr:@david/dax@0.41.0"\\n' +
                        'import { assertEquals } from "jsr:@std/assert@^0.225.2"\\n' +
                        'import { beforeAll, describe, it } from "jsr:@std/testing/bdd"\\n' +
                        "import {\\n" +
                        "  getMetadata,\\n" +
                        "  getProblemDir,\\n" +
                        "  METADATA_FILE_NAME,\\n" +
                        '} from "jsr:@r4ai/atcoder-cli@0.3.1"\\n' +
                        "\\n" +
                        "const testsDir = import.meta.dirname!\\n" +
                        "const problemDir = getProblemDir(testsDir)\\n" +
                        "if (!problemDir) {\\n" +
                        "  throw new Error(\\n" +
                        "    \`Failed to get problem directory. Make sure \\\\\`\${METADATA_FILE_NAME}\\\\\` exists.\`,\\n" +
                        "  )\\n" +
                        "}\\n" +
                        "const metadata = getMetadata(problemDir)\\n" +
                        "if (!metadata) {\\n" +
                        "  throw new Error(\\n" +
                        "    \`Failed to get metadata for \${problemDir}. Make sure \\\\\`\${METADATA_FILE_NAME}\\\\\` exists.\`,\\n" +
                        "  )\\n" +
                        "}\\n" +
                        "\\n" +
                        "describe(\`\${metadata.contest}/\${metadata.problem}\`, () => {\\n" +
                        "  beforeAll(async () => {\\n" +
                        "    // Compile\\n" +
                        "    await \$.raw\`\${metadata.source.compileCommand}\`.cwd(problemDir)\\n" +
                        "  })\\n" +
                        "\\n" +
                        "  for (const test of metadata.tests) {\\n" +
                        "    it(test.input, async () => {\\n" +
                        "      const input = (await Deno.readTextFile(\\n" +
                        "        path.resolve(problemDir, test.input),\\n" +
                        "      )).trimEnd()\\n" +
                        "      const expected = (await Deno.readTextFile(\\n" +
                        "        path.resolve(problemDir, test.output),\\n" +
                        "      )).trimEnd()\\n" +
                        "      const actual = await \$.raw\`\${metadata.source.executeCommand}\`.stdinText(\\n" +
                        "        input,\\n" +
                        "      ).cwd(problemDir).text()\\n" +
                        "      assertEquals(\\n" +
                        "        actual,\\n" +
                        "        expected,\\n" +
                        "      )\\n" +
                        "    })\\n" +
                        "  }\\n" +
                        "})\\n",
                      name: "test.ts",
                      type: "file"
                    }
                  ],
                  name: "tests",
                  type: "dir"
                }
              ],
              name: "A",
              type: "dir"
            },
            {
              children: [
                {
                  content: "open Batteries",
                  name: "b.ml",
                  type: "file"
                },
                {
                  content: "(executable\\n" +
                    "  (name B)\\n" +
                    "  (public_name abc100-B)\\n" +
                    "  (libraries batteries))",
                  name: "dune",
                  type: "file"
                },
                {
                  content: "{\\n" +
                    '  "contest": "abc100",\\n' +
                    '  "problem": "B",\\n' +
                    '  "source": {\\n' +
                    '    "path": "b.ml",\\n' +
                    '    "compileCommand": "eval (opam env) ocamlfind ocamlopt -O2 -o a.out b.ml -linkpkg -thread -package str,num,threads,containers,core,iter,batteries",\\n' +
                    '    "executeCommand": "./a.out"\\n' +
                    "  },\\n" +
                    '  "tests": [\\n' +
                    "    {\\n" +
                    '      "input": "tests/in_1.txt",\\n' +
                    '      "output": "tests/out_1.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_2.txt",\\n' +
                    '      "output": "tests/out_2.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_3.txt",\\n' +
                    '      "output": "tests/out_3.txt"\\n' +
                    "    }\\n" +
                    "  ]\\n" +
                    "}",
                  name: "metadata.json",
                  type: "file"
                },
                {
                  children: [
                    {
                      content: "0 5\\n",
                      name: "in_1.txt",
                      type: "file"
                    },
                    {
                      content: "1 11\\n",
                      name: "in_2.txt",
                      type: "file"
                    },
                    {
                      content: "2 85\\n",
                      name: "in_3.txt",
                      type: "file"
                    },
                    { content: "5\\n", name: "out_1.txt", type: "file" },
                    {
                      content: "1100\\n",
                      name: "out_2.txt",
                      type: "file"
                    },
                    {
                      content: "850000\\n",
                      name: "out_3.txt",
                      type: "file"
                    },
                    {
                      content: "#!/usr/bin/env -S deno test --allow-read --allow-env --allow-run --allow-net\\n" +
                        "\\n" +
                        'import * as path from "jsr:@std/path@0.225.1"\\n' +
                        'import { \$ } from "jsr:@david/dax@0.41.0"\\n' +
                        'import { assertEquals } from "jsr:@std/assert@^0.225.2"\\n' +
                        'import { beforeAll, describe, it } from "jsr:@std/testing/bdd"\\n' +
                        "import {\\n" +
                        "  getMetadata,\\n" +
                        "  getProblemDir,\\n" +
                        "  METADATA_FILE_NAME,\\n" +
                        '} from "jsr:@r4ai/atcoder-cli@0.3.1"\\n' +
                        "\\n" +
                        "const testsDir = import.meta.dirname!\\n" +
                        "const problemDir = getProblemDir(testsDir)\\n" +
                        "if (!problemDir) {\\n" +
                        "  throw new Error(\\n" +
                        "    \`Failed to get problem directory. Make sure \\\\\`\${METADATA_FILE_NAME}\\\\\` exists.\`,\\n" +
                        "  )\\n" +
                        "}\\n" +
                        "const metadata = getMetadata(problemDir)\\n" +
                        "if (!metadata) {\\n" +
                        "  throw new Error(\\n" +
                        "    \`Failed to get metadata for \${problemDir}. Make sure \\\\\`\${METADATA_FILE_NAME}\\\\\` exists.\`,\\n" +
                        "  )\\n" +
                        "}\\n" +
                        "\\n" +
                        "describe(\`\${metadata.contest}/\${metadata.problem}\`, () => {\\n" +
                        "  beforeAll(async () => {\\n" +
                        "    // Compile\\n" +
                        "    await \$.raw\`\${metadata.source.compileCommand}\`.cwd(problemDir)\\n" +
                        "  })\\n" +
                        "\\n" +
                        "  for (const test of metadata.tests) {\\n" +
                        "    it(test.input, async () => {\\n" +
                        "      const input = (await Deno.readTextFile(\\n" +
                        "        path.resolve(problemDir, test.input),\\n" +
                        "      )).trimEnd()\\n" +
                        "      const expected = (await Deno.readTextFile(\\n" +
                        "        path.resolve(problemDir, test.output),\\n" +
                        "      )).trimEnd()\\n" +
                        "      const actual = await \$.raw\`\${metadata.source.executeCommand}\`.stdinText(\\n" +
                        "        input,\\n" +
                        "      ).cwd(problemDir).text()\\n" +
                        "      assertEquals(\\n" +
                        "        actual,\\n" +
                        "        expected,\\n" +
                        "      )\\n" +
                        "    })\\n" +
                        "  }\\n" +
                        "})\\n",
                      name: "test.ts",
                      type: "file"
                    }
                  ],
                  name: "tests",
                  type: "dir"
                }
              ],
              name: "B",
              type: "dir"
            },
            {
              children: [
                {
                  content: "open Batteries",
                  name: "c.ml",
                  type: "file"
                },
                {
                  content: "(executable\\n" +
                    "  (name C)\\n" +
                    "  (public_name abc100-C)\\n" +
                    "  (libraries batteries))",
                  name: "dune",
                  type: "file"
                },
                {
                  content: "{\\n" +
                    '  "contest": "abc100",\\n' +
                    '  "problem": "C",\\n' +
                    '  "source": {\\n' +
                    '    "path": "c.ml",\\n' +
                    '    "compileCommand": "eval (opam env) ocamlfind ocamlopt -O2 -o a.out c.ml -linkpkg -thread -package str,num,threads,containers,core,iter,batteries",\\n' +
                    '    "executeCommand": "./a.out"\\n' +
                    "  },\\n" +
                    '  "tests": [\\n' +
                    "    {\\n" +
                    '      "input": "tests/in_1.txt",\\n' +
                    '      "output": "tests/out_1.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_2.txt",\\n' +
                    '      "output": "tests/out_2.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_3.txt",\\n' +
                    '      "output": "tests/out_3.txt"\\n' +
                    "    }\\n" +
                    "  ]\\n" +
                    "}",
                  name: "metadata.json",
                  type: "file"
                },
                {
                  children: [
                    {
                      content: "3\\n5 2 4\\n",
                      name: "in_1.txt",
                      type: "file"
                    },
                    {
                      content: "4\\n631 577 243 199\\n",
                      name: "in_2.txt",
                      type: "file"
                    },
                    {
                      content: "10\\n2184 2126 1721 1800 1024 2528 3360 1945 1280 1776\\n",
                      name: "in_3.txt",
                      type: "file"
                    },
                    { content: "3\\n", name: "out_1.txt", type: "file" },
                    { content: "0\\n", name: "out_2.txt", type: "file" },
                    {
                      content: "39\\n",
                      name: "out_3.txt",
                      type: "file"
                    },
                    {
                      content: "#!/usr/bin/env -S deno test --allow-read --allow-env --allow-run --allow-net\\n" +
                        "\\n" +
                        'import * as path from "jsr:@std/path@0.225.1"\\n' +
                        'import { \$ } from "jsr:@david/dax@0.41.0"\\n' +
                        'import { assertEquals } from "jsr:@std/assert@^0.225.2"\\n' +
                        'import { beforeAll, describe, it } from "jsr:@std/testing/bdd"\\n' +
                        "import {\\n" +
                        "  getMetadata,\\n" +
                        "  getProblemDir,\\n" +
                        "  METADATA_FILE_NAME,\\n" +
                        '} from "jsr:@r4ai/atcoder-cli@0.3.1"\\n' +
                        "\\n" +
                        "const testsDir = import.meta.dirname!\\n" +
                        "const problemDir = getProblemDir(testsDir)\\n" +
                        "if (!problemDir) {\\n" +
                        "  throw new Error(\\n" +
                        "    \`Failed to get problem directory. Make sure \\\\\`\${METADATA_FILE_NAME}\\\\\` exists.\`,\\n" +
                        "  )\\n" +
                        "}\\n" +
                        "const metadata = getMetadata(problemDir)\\n" +
                        "if (!metadata) {\\n" +
                        "  throw new Error(\\n" +
                        "    \`Failed to get metadata for \${problemDir}. Make sure \\\\\`\${METADATA_FILE_NAME}\\\\\` exists.\`,\\n" +
                        "  )\\n" +
                        "}\\n" +
                        "\\n" +
                        "describe(\`\${metadata.contest}/\${metadata.problem}\`, () => {\\n" +
                        "  beforeAll(async () => {\\n" +
                        "    // Compile\\n" +
                        "    await \$.raw\`\${metadata.source.compileCommand}\`.cwd(problemDir)\\n" +
                        "  })\\n" +
                        "\\n" +
                        "  for (const test of metadata.tests) {\\n" +
                        "    it(test.input, async () => {\\n" +
                        "      const input = (await Deno.readTextFile(\\n" +
                        "        path.resolve(problemDir, test.input),\\n" +
                        "      )).trimEnd()\\n" +
                        "      const expected = (await Deno.readTextFile(\\n" +
                        "        path.resolve(problemDir, test.output),\\n" +
                        "      )).trimEnd()\\n" +
                        "      const actual = await \$.raw\`\${metadata.source.executeCommand}\`.stdinText(\\n" +
                        "        input,\\n" +
                        "      ).cwd(problemDir).text()\\n" +
                        "      assertEquals(\\n" +
                        "        actual,\\n" +
                        "        expected,\\n" +
                        "      )\\n" +
                        "    })\\n" +
                        "  }\\n" +
                        "})\\n",
                      name: "test.ts",
                      type: "file"
                    }
                  ],
                  name: "tests",
                  type: "dir"
                }
              ],
              name: "C",
              type: "dir"
            },
            {
              children: [
                {
                  content: "open Batteries",
                  name: "d.ml",
                  type: "file"
                },
                {
                  content: "(executable\\n" +
                    "  (name D)\\n" +
                    "  (public_name abc100-D)\\n" +
                    "  (libraries batteries))",
                  name: "dune",
                  type: "file"
                },
                {
                  content: "{\\n" +
                    '  "contest": "abc100",\\n' +
                    '  "problem": "D",\\n' +
                    '  "source": {\\n' +
                    '    "path": "d.ml",\\n' +
                    '    "compileCommand": "eval (opam env) ocamlfind ocamlopt -O2 -o a.out d.ml -linkpkg -thread -package str,num,threads,containers,core,iter,batteries",\\n' +
                    '    "executeCommand": "./a.out"\\n' +
                    "  },\\n" +
                    '  "tests": [\\n' +
                    "    {\\n" +
                    '      "input": "tests/in_1.txt",\\n' +
                    '      "output": "tests/out_1.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_2.txt",\\n' +
                    '      "output": "tests/out_2.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_3.txt",\\n' +
                    '      "output": "tests/out_3.txt"\\n' +
                    "    },\\n" +
                    "    {\\n" +
                    '      "input": "tests/in_4.txt",\\n' +
                    '      "output": "tests/out_4.txt"\\n' +
                    "    }\\n" +
                    "  ]\\n" +
                    "}",
                  name: "metadata.json",
                  type: "file"
                },
                {
                  children: [
                    {
                      content: "5 3\\n3 1 4\\n1 5 9\\n2 6 5\\n3 5 8\\n9 7 9\\n",
                      name: "in_1.txt",
                      type: "file"
                    },
                    {
                      content: "5 3\\n1 -2 3\\n-4 5 -6\\n7 -8 -9\\n-10 11 -12\\n13 -14 15\\n",
                      name: "in_2.txt",
                      type: "file"
                    },
                    {
                      content: "10 5\\n" +
                        "10 -80 21\\n" +
                        "23 8 38\\n" +
                        "-94 28 11\\n" +
                        "-26 -2 18\\n" +
                        "-69 72 79\\n" +
                        "-26 -86 -54\\n" +
                        "-72 -50 59\\n" +
                        "21 65 -32\\n" +
                        "40 -94 87\\n" +
                        "-62 18 82\\n",
                      name: "in_3.txt",
                      type: "file"
                    },
                    {
                      content: "3 2\\n" +
                        "2000000000 -9000000000 4000000000\\n" +
                        "7000000000 -5000000000 3000000000\\n" +
                        "6000000000 -1000000000 8000000000\\n",
                      name: "in_4.txt",
                      type: "file"
                    },
                    {
                      content: "56\\n",
                      name: "out_1.txt",
                      type: "file"
                    },
                    {
                      content: "54\\n",
                      name: "out_2.txt",
                      type: "file"
                    },
                    {
                      content: "638\\n",
                      name: "out_3.txt",
                      type: "file"
                    },
                    {
                      content: "30000000000\\n",
                      name: "out_4.txt",
                      type: "file"
                    },
                    {
                      content: "#!/usr/bin/env -S deno test --allow-read --allow-env --allow-run --allow-net\\n" +
                        "\\n" +
                        'import * as path from "jsr:@std/path@0.225.1"\\n' +
                        'import { \$ } from "jsr:@david/dax@0.41.0"\\n' +
                        'import { assertEquals } from "jsr:@std/assert@^0.225.2"\\n' +
                        'import { beforeAll, describe, it } from "jsr:@std/testing/bdd"\\n' +
                        "import {\\n" +
                        "  getMetadata,\\n" +
                        "  getProblemDir,\\n" +
                        "  METADATA_FILE_NAME,\\n" +
                        '} from "jsr:@r4ai/atcoder-cli@0.3.1"\\n' +
                        "\\n" +
                        "const testsDir = import.meta.dirname!\\n" +
                        "const problemDir = getProblemDir(testsDir)\\n" +
                        "if (!problemDir) {\\n" +
                        "  throw new Error(\\n" +
                        "    \`Failed to get problem directory. Make sure \\\\\`\${METADATA_FILE_NAME}\\\\\` exists.\`,\\n" +
                        "  )\\n" +
                        "}\\n" +
                        "const metadata = getMetadata(problemDir)\\n" +
                        "if (!metadata) {\\n" +
                        "  throw new Error(\\n" +
                        "    \`Failed to get metadata for \${problemDir}. Make sure \\\\\`\${METADATA_FILE_NAME}\\\\\` exists.\`,\\n" +
                        "  )\\n" +
                        "}\\n" +
                        "\\n" +
                        "describe(\`\${metadata.contest}/\${metadata.problem}\`, () => {\\n" +
                        "  beforeAll(async () => {\\n" +
                        "    // Compile\\n" +
                        "    await \$.raw\`\${metadata.source.compileCommand}\`.cwd(problemDir)\\n" +
                        "  })\\n" +
                        "\\n" +
                        "  for (const test of metadata.tests) {\\n" +
                        "    it(test.input, async () => {\\n" +
                        "      const input = (await Deno.readTextFile(\\n" +
                        "        path.resolve(problemDir, test.input),\\n" +
                        "      )).trimEnd()\\n" +
                        "      const expected = (await Deno.readTextFile(\\n" +
                        "        path.resolve(problemDir, test.output),\\n" +
                        "      )).trimEnd()\\n" +
                        "      const actual = await \$.raw\`\${metadata.source.executeCommand}\`.stdinText(\\n" +
                        "        input,\\n" +
                        "      ).cwd(problemDir).text()\\n" +
                        "      assertEquals(\\n" +
                        "        actual,\\n" +
                        "        expected,\\n" +
                        "      )\\n" +
                        "    })\\n" +
                        "  }\\n" +
                        "})\\n",
                      name: "test.ts",
                      type: "file"
                    }
                  ],
                  name: "tests",
                  type: "dir"
                }
              ],
              name: "D",
              type: "dir"
            }
          ],
          name: "abc100",
          type: "dir"
        }
      ],
      name: "contests",
      type: "dir"
    },
    {
      content: "(env\\n (dev\\n  (flags\\n   (:standard -w -33))))\\n",
      name: "dune",
      type: "file"
    },
    {
      content: "(lang dune 3.7)\\n\\n(package\\n (name ac))\\n",
      name: "dune-project",
      type: "file"
    }
  ],
  name: "ocaml",
  type: "dir"
}
`;
